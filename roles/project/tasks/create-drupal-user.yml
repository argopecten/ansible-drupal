---
# This playbook creates a Drupal user with a random password and adds an SSH key for the user.

# Check if the password file already exists
- name: Check if password file exists
  ansible.builtin.stat:
    path: "{{ root_home }}/password_for_{{ drupal_user }}.txt"
  register: password_file

# Set the {{ drupal_user_pwd }} from the password file if it exists
- name: Read password from file
  ansible.builtin.slurp:
    src: "{{ root_home }}/password_for_{{ drupal_user }}.txt"
  register: password_content
  when: password_file.stat.exists
- name: Set password fact from file content
  ansible.builtin.set_fact:
    drupal_user_pwd: "{{ password_content.content | b64decode }}"
  when: password_file.stat.exists

# Generate and write into a file a random password for the Drupal  user
- name: Generate a unique password for the Drupal user
  ansible.builtin.set_fact:
    drupal_user_pwd: "{{ lookup('ansible.builtin.password', '{{ root_home }}/password_for_{{ drupal_user }}.txt', length=16, chars=['ascii_letters', 'digits', 'punctuation']) }}"
  when: not password_file.stat.exists

# Create the Drupal user, its group, and home directory
- name: Create user group
  ansible.builtin.group:
    name: "{{ drupal_user }}"
    system: yes
    state: present
- name: Add drupal user
  ansible.builtin.user:
    name: "{{ drupal_user }}"
    state: present
    password: "{{ drupal_user_pwd | password_hash('sha512') }}"
    system: yes
    home: "{{ drupal_user_home }}"
    group: "{{ drupal_user }}"
    groups: "sudo"
    password_lock: true
    shell: /bin/bash
    append: yes
  notify: Add web server user to the Drupal user group
- name: Create user home
  ansible.builtin.file:
    path: "{{ drupal_user_home }}"
    state: directory
    owner: "{{ drupal_user }}"
    group: "{{ drupal_user }}"

# Add SSH key for the Drupal admin user
- name: (USER) Add SSH key for Drupal admin user
  ansible.posix.authorized_key:
    user: "{{ drupal_user }}"
    key: "{{ lookup('file', item) }}"
    state: present
  with_items: "{{ drupal_user_pkey }}"
  # The SSH public key(s) specified in the 'public_key' variable are added to the user's authorized_keys file.
