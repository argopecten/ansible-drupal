---
# Verify configurations for each platform defined for webservers

- name: Verify configurations for all platforms
  ansible.builtin.debug:
    msg: "Platform: {{ item.key }}, Version: {{ platforms[item.key].version }}"

- name: Check if platform root exists
  ansible.builtin.stat:
    path: "{{ item.value.path }}/{{ item.value.name }}"
  register: project_root

- name: Log message if platform root does not exist
  ansible.builtin.debug:
    msg: "Platform root does not exist for platform {{ item.key }}  on host {{ inventory_hostname }}"
  when: project_root.stat.exists == False

- name: Log message if platform root does exist
  ansible.builtin.debug:
    msg: "Platform root does exist for platform {{ item.key }} on host {{ inventory_hostname }}"
  when: project_root.stat.exists == True

- name: Ensure new project root exists and has proper permissions.
  ansible.builtin.file:
    path: "{{ item.value.path }}/{{ item.value.name }}"
    state: directory
    owner: "{{ item.value.user }}"
    group: "{{ item.value.group }}"
    mode: "{{ drupal_root_permissions }}"
  become: true
  when: project_root.stat.exists == True

# create backup directory for the new Drupal platform
- name: Create backup directory for the new Drupal platform
  ansible.builtin.file:
    path: "/home/{{ item.value.user }}/backup/{{ item.key }}"
    state: directory
    owner: "{{ item.value.user }}"
    group: "{{ item.value.group }}"
    mode: "0750"
  become: true
  when: not ansible_check_mode