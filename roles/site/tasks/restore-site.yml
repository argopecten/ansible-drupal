---
# Restore site specified in command line
# ansible-playbook playbooks/sites.yml --tags restore --extra-vars "site=c1.example.com"

# - restore database for site
# - restore the files in sites directory

# Check if it runs on the specified platform
- name: Check presence of platform
  ansible.builtin.assert:
    that: 
      - platforms[ sites[item.key].platform ].name == sites[item.key].platform
    fail_msg: "Defined platform for site {{ item.key }} is not present on the server."
  register: platform

- block:
    - name: Set variables for the Drupal site
      ansible.builtin.set_fact:
        drush_path: "{{ platforms[ sites[item.key].platform ].path }}{{ platforms[ sites[item.key].platform ].name }}/vendor/bin/drush"
        platform_path: "{{ platforms[ sites[item.key].platform ].path }}{{ platforms[ sites[item.key].platform ].name }}"
        platform_user: "{{ platforms[ sites[item.key].platform ].user }}"
        platform_group: "{{ platforms[ sites[item.key].platform ].group }}"
        site_name: "{{ sites[item.key].name }}"
        backup_dir: "/home/{{ platforms[ sites[item.key].platform ].user }}/backup/{{ platforms[ sites[item.key].platform ].name }}/{{ sites[item.key].name }}-{{ date }}"

    # Check if the site already exists within the platform
    - name: Check if Drupal site exists
      ansible.builtin.stat:
        path: "{{ platforms[ sites[item.key].platform ].path }}{{ platforms[ sites[item.key].platform ].name }}/web/sites/{{ sites[item.key].name }}"
      register: site_exists

    # Create a new site if it does not exist
    - name: Install new site
      include_tasks: install-site-drush.yml
      when: not site_exists.stat.exists

    # Restore files in /web/sites directory
    - name: Restore files in /web/sites directory
      ansible.builtin.unarchive:
        src: "{{ backup_dir }}/files.tar.gz"
        dest: "{{ platform_path }}/web/sites/"
        remote_src: true
        owner: "{{ platforms[ sites[item.key].platform ].user }}"
        group: "{{ platforms[ sites[item.key].platform ].group }}"
      become: true
      when: not ansible_check_mode
      notify: Set permissions for site directory

    # Restore database for the site
    - name: Restore database for the site
      # drush sql:cli relies on settings.php for database connection
      ansible.builtin.shell: >
        {{ drush_path }} sql:cli --uri={{ site_name }} --root={{ platform_path }} < {{ backup_dir }}/database.sql
      args:
        chdir: "{{ platform_path }}"
      when: not ansible_check_mode

  # Block ends here
  when: platform is not failed
